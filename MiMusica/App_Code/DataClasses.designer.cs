#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LaVitrola")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDispositivo(Dispositivo instance);
  partial void UpdateDispositivo(Dispositivo instance);
  partial void DeleteDispositivo(Dispositivo instance);
  partial void InsertDispositivo_Musica(Dispositivo_Musica instance);
  partial void UpdateDispositivo_Musica(Dispositivo_Musica instance);
  partial void DeleteDispositivo_Musica(Dispositivo_Musica instance);
  partial void InsertMusica(Musica instance);
  partial void UpdateMusica(Musica instance);
  partial void DeleteMusica(Musica instance);
  partial void InsertPlayList(PlayList instance);
  partial void UpdatePlayList(PlayList instance);
  partial void DeletePlayList(PlayList instance);
  partial void InsertPlayList_Musica(PlayList_Musica instance);
  partial void UpdatePlayList_Musica(PlayList_Musica instance);
  partial void DeletePlayList_Musica(PlayList_Musica instance);
  partial void InsertSetting(Setting instance);
  partial void UpdateSetting(Setting instance);
  partial void DeleteSetting(Setting instance);
  partial void InsertAlbum(Album instance);
  partial void UpdateAlbum(Album instance);
  partial void DeleteAlbum(Album instance);
  partial void InsertAutor(Autor instance);
  partial void UpdateAutor(Autor instance);
  partial void DeleteAutor(Autor instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LaVitrolaConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Dispositivo> Dispositivos
	{
		get
		{
			return this.GetTable<Dispositivo>();
		}
	}
	
	public System.Data.Linq.Table<Dispositivo_Musica> Dispositivo_Musicas
	{
		get
		{
			return this.GetTable<Dispositivo_Musica>();
		}
	}
	
	public System.Data.Linq.Table<Musica> Musicas
	{
		get
		{
			return this.GetTable<Musica>();
		}
	}
	
	public System.Data.Linq.Table<PlayList> PlayLists
	{
		get
		{
			return this.GetTable<PlayList>();
		}
	}
	
	public System.Data.Linq.Table<PlayList_Musica> PlayList_Musicas
	{
		get
		{
			return this.GetTable<PlayList_Musica>();
		}
	}
	
	public System.Data.Linq.Table<Setting> Settings
	{
		get
		{
			return this.GetTable<Setting>();
		}
	}
	
	public System.Data.Linq.Table<Album> Albums
	{
		get
		{
			return this.GetTable<Album>();
		}
	}
	
	public System.Data.Linq.Table<Autor> Autors
	{
		get
		{
			return this.GetTable<Autor>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.I_Dispositivo_Musica")]
	public int I_Dispositivo_Musica([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nombre_Musica", DbType="VarChar(100)")] string nombre_Musica, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id_Dispositivo", DbType="Int")] System.Nullable<int> id_Dispositivo)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nombre_Musica, id_Dispositivo);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.I_Dispositivo")]
	public int I_Dispositivo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IP", DbType="VarChar(15)")] string iP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MAC", DbType="VarChar(20)")] string mAC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Contador", DbType="Int")] System.Nullable<int> contador)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iP, mAC, contador);
		return ((int)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dispositivo")]
public partial class Dispositivo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _IP;
	
	private string _MAC;
	
	private System.Nullable<System.DateTime> _Ultimo_Acceso;
	
	private System.Nullable<int> _Contador;
	
	private EntitySet<Dispositivo_Musica> _Dispositivo_Musicas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnMACChanging(string value);
    partial void OnMACChanged();
    partial void OnUltimo_AccesoChanging(System.Nullable<System.DateTime> value);
    partial void OnUltimo_AccesoChanged();
    partial void OnContadorChanging(System.Nullable<int> value);
    partial void OnContadorChanged();
    #endregion
	
	public Dispositivo()
	{
		this._Dispositivo_Musicas = new EntitySet<Dispositivo_Musica>(new Action<Dispositivo_Musica>(this.attach_Dispositivo_Musicas), new Action<Dispositivo_Musica>(this.detach_Dispositivo_Musicas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(15)")]
	public string IP
	{
		get
		{
			return this._IP;
		}
		set
		{
			if ((this._IP != value))
			{
				this.OnIPChanging(value);
				this.SendPropertyChanging();
				this._IP = value;
				this.SendPropertyChanged("IP");
				this.OnIPChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAC", DbType="NVarChar(20)")]
	public string MAC
	{
		get
		{
			return this._MAC;
		}
		set
		{
			if ((this._MAC != value))
			{
				this.OnMACChanging(value);
				this.SendPropertyChanging();
				this._MAC = value;
				this.SendPropertyChanged("MAC");
				this.OnMACChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ultimo_Acceso", DbType="DateTime")]
	public System.Nullable<System.DateTime> Ultimo_Acceso
	{
		get
		{
			return this._Ultimo_Acceso;
		}
		set
		{
			if ((this._Ultimo_Acceso != value))
			{
				this.OnUltimo_AccesoChanging(value);
				this.SendPropertyChanging();
				this._Ultimo_Acceso = value;
				this.SendPropertyChanged("Ultimo_Acceso");
				this.OnUltimo_AccesoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contador", DbType="Int")]
	public System.Nullable<int> Contador
	{
		get
		{
			return this._Contador;
		}
		set
		{
			if ((this._Contador != value))
			{
				this.OnContadorChanging(value);
				this.SendPropertyChanging();
				this._Contador = value;
				this.SendPropertyChanged("Contador");
				this.OnContadorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dispositivo_Dispositivo_Musica", Storage="_Dispositivo_Musicas", ThisKey="Id", OtherKey="Id_Dispositivo")]
	public EntitySet<Dispositivo_Musica> Dispositivo_Musicas
	{
		get
		{
			return this._Dispositivo_Musicas;
		}
		set
		{
			this._Dispositivo_Musicas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Dispositivo_Musicas(Dispositivo_Musica entity)
	{
		this.SendPropertyChanging();
		entity.Dispositivo = this;
	}
	
	private void detach_Dispositivo_Musicas(Dispositivo_Musica entity)
	{
		this.SendPropertyChanging();
		entity.Dispositivo = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dispositivo_Musica")]
public partial class Dispositivo_Musica : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Nomb_Musica;
	
	private System.Nullable<int> _Id_Dispositivo;
	
	private System.Nullable<System.DateTime> _Fecha;
	
	private EntityRef<Dispositivo> _Dispositivo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomb_MusicaChanging(string value);
    partial void OnNomb_MusicaChanged();
    partial void OnId_DispositivoChanging(System.Nullable<int> value);
    partial void OnId_DispositivoChanged();
    partial void OnFechaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaChanged();
    #endregion
	
	public Dispositivo_Musica()
	{
		this._Dispositivo = default(EntityRef<Dispositivo>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nomb_Musica", DbType="VarChar(MAX)")]
	public string Nomb_Musica
	{
		get
		{
			return this._Nomb_Musica;
		}
		set
		{
			if ((this._Nomb_Musica != value))
			{
				this.OnNomb_MusicaChanging(value);
				this.SendPropertyChanging();
				this._Nomb_Musica = value;
				this.SendPropertyChanged("Nomb_Musica");
				this.OnNomb_MusicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Dispositivo", DbType="Int")]
	public System.Nullable<int> Id_Dispositivo
	{
		get
		{
			return this._Id_Dispositivo;
		}
		set
		{
			if ((this._Id_Dispositivo != value))
			{
				if (this._Dispositivo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnId_DispositivoChanging(value);
				this.SendPropertyChanging();
				this._Id_Dispositivo = value;
				this.SendPropertyChanged("Id_Dispositivo");
				this.OnId_DispositivoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha", DbType="DateTime")]
	public System.Nullable<System.DateTime> Fecha
	{
		get
		{
			return this._Fecha;
		}
		set
		{
			if ((this._Fecha != value))
			{
				this.OnFechaChanging(value);
				this.SendPropertyChanging();
				this._Fecha = value;
				this.SendPropertyChanged("Fecha");
				this.OnFechaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dispositivo_Dispositivo_Musica", Storage="_Dispositivo", ThisKey="Id_Dispositivo", OtherKey="Id", IsForeignKey=true)]
	public Dispositivo Dispositivo
	{
		get
		{
			return this._Dispositivo.Entity;
		}
		set
		{
			Dispositivo previousValue = this._Dispositivo.Entity;
			if (((previousValue != value) 
						|| (this._Dispositivo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dispositivo.Entity = null;
					previousValue.Dispositivo_Musicas.Remove(this);
				}
				this._Dispositivo.Entity = value;
				if ((value != null))
				{
					value.Dispositivo_Musicas.Add(this);
					this._Id_Dispositivo = value.Id;
				}
				else
				{
					this._Id_Dispositivo = default(Nullable<int>);
				}
				this.SendPropertyChanged("Dispositivo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Musica")]
public partial class Musica : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Nombre_Cancion;
	
	private System.Nullable<int> _Id_Album;
	
	private string _Direccion;
	
	private System.Nullable<int> _Tipo;
	
	private EntitySet<PlayList_Musica> _PlayList_Musicas;
	
	private EntityRef<Album> _Album;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombre_CancionChanging(string value);
    partial void OnNombre_CancionChanged();
    partial void OnId_AlbumChanging(System.Nullable<int> value);
    partial void OnId_AlbumChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnTipoChanging(System.Nullable<int> value);
    partial void OnTipoChanged();
    #endregion
	
	public Musica()
	{
		this._PlayList_Musicas = new EntitySet<PlayList_Musica>(new Action<PlayList_Musica>(this.attach_PlayList_Musicas), new Action<PlayList_Musica>(this.detach_PlayList_Musicas));
		this._Album = default(EntityRef<Album>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre_Cancion", DbType="VarChar(MAX)")]
	public string Nombre_Cancion
	{
		get
		{
			return this._Nombre_Cancion;
		}
		set
		{
			if ((this._Nombre_Cancion != value))
			{
				this.OnNombre_CancionChanging(value);
				this.SendPropertyChanging();
				this._Nombre_Cancion = value;
				this.SendPropertyChanged("Nombre_Cancion");
				this.OnNombre_CancionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Album", DbType="Int")]
	public System.Nullable<int> Id_Album
	{
		get
		{
			return this._Id_Album;
		}
		set
		{
			if ((this._Id_Album != value))
			{
				if (this._Album.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnId_AlbumChanging(value);
				this.SendPropertyChanging();
				this._Id_Album = value;
				this.SendPropertyChanged("Id_Album");
				this.OnId_AlbumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="VarChar(MAX)")]
	public string Direccion
	{
		get
		{
			return this._Direccion;
		}
		set
		{
			if ((this._Direccion != value))
			{
				this.OnDireccionChanging(value);
				this.SendPropertyChanging();
				this._Direccion = value;
				this.SendPropertyChanged("Direccion");
				this.OnDireccionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tipo", DbType="Int")]
	public System.Nullable<int> Tipo
	{
		get
		{
			return this._Tipo;
		}
		set
		{
			if ((this._Tipo != value))
			{
				this.OnTipoChanging(value);
				this.SendPropertyChanging();
				this._Tipo = value;
				this.SendPropertyChanged("Tipo");
				this.OnTipoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Musica_PlayList_Musica", Storage="_PlayList_Musicas", ThisKey="Id", OtherKey="Id_Musica")]
	public EntitySet<PlayList_Musica> PlayList_Musicas
	{
		get
		{
			return this._PlayList_Musicas;
		}
		set
		{
			this._PlayList_Musicas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Musica", Storage="_Album", ThisKey="Id_Album", OtherKey="Id", IsForeignKey=true)]
	public Album Album
	{
		get
		{
			return this._Album.Entity;
		}
		set
		{
			Album previousValue = this._Album.Entity;
			if (((previousValue != value) 
						|| (this._Album.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Album.Entity = null;
					previousValue.Musicas.Remove(this);
				}
				this._Album.Entity = value;
				if ((value != null))
				{
					value.Musicas.Add(this);
					this._Id_Album = value.Id;
				}
				else
				{
					this._Id_Album = default(Nullable<int>);
				}
				this.SendPropertyChanged("Album");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayList_Musicas(PlayList_Musica entity)
	{
		this.SendPropertyChanging();
		entity.Musica = this;
	}
	
	private void detach_PlayList_Musicas(PlayList_Musica entity)
	{
		this.SendPropertyChanging();
		entity.Musica = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayList")]
public partial class PlayList : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Nombre;
	
	private System.Nullable<bool> _Activa;
	
	private EntitySet<PlayList_Musica> _PlayList_Musicas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnActivaChanging(System.Nullable<bool> value);
    partial void OnActivaChanged();
    #endregion
	
	public PlayList()
	{
		this._PlayList_Musicas = new EntitySet<PlayList_Musica>(new Action<PlayList_Musica>(this.attach_PlayList_Musicas), new Action<PlayList_Musica>(this.detach_PlayList_Musicas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activa", DbType="Bit")]
	public System.Nullable<bool> Activa
	{
		get
		{
			return this._Activa;
		}
		set
		{
			if ((this._Activa != value))
			{
				this.OnActivaChanging(value);
				this.SendPropertyChanging();
				this._Activa = value;
				this.SendPropertyChanged("Activa");
				this.OnActivaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayList_PlayList_Musica", Storage="_PlayList_Musicas", ThisKey="Id", OtherKey="Id_PlayList")]
	public EntitySet<PlayList_Musica> PlayList_Musicas
	{
		get
		{
			return this._PlayList_Musicas;
		}
		set
		{
			this._PlayList_Musicas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayList_Musicas(PlayList_Musica entity)
	{
		this.SendPropertyChanging();
		entity.PlayList = this;
	}
	
	private void detach_PlayList_Musicas(PlayList_Musica entity)
	{
		this.SendPropertyChanging();
		entity.PlayList = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayList_Musica")]
public partial class PlayList_Musica : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id_PlayList;
	
	private int _Id_Musica;
	
	private System.Nullable<bool> _De_Cliente;
	
	private System.Nullable<System.DateTime> _Fecha_Insertada;
	
	private System.Nullable<bool> _Activo;
	
	private EntityRef<Musica> _Musica;
	
	private EntityRef<PlayList> _PlayList;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_PlayListChanging(int value);
    partial void OnId_PlayListChanged();
    partial void OnId_MusicaChanging(int value);
    partial void OnId_MusicaChanged();
    partial void OnDe_ClienteChanging(System.Nullable<bool> value);
    partial void OnDe_ClienteChanged();
    partial void OnFecha_InsertadaChanging(System.Nullable<System.DateTime> value);
    partial void OnFecha_InsertadaChanged();
    partial void OnActivoChanging(System.Nullable<bool> value);
    partial void OnActivoChanged();
    #endregion
	
	public PlayList_Musica()
	{
		this._Musica = default(EntityRef<Musica>);
		this._PlayList = default(EntityRef<PlayList>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_PlayList", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id_PlayList
	{
		get
		{
			return this._Id_PlayList;
		}
		set
		{
			if ((this._Id_PlayList != value))
			{
				if (this._PlayList.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnId_PlayListChanging(value);
				this.SendPropertyChanging();
				this._Id_PlayList = value;
				this.SendPropertyChanged("Id_PlayList");
				this.OnId_PlayListChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Musica", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id_Musica
	{
		get
		{
			return this._Id_Musica;
		}
		set
		{
			if ((this._Id_Musica != value))
			{
				if (this._Musica.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnId_MusicaChanging(value);
				this.SendPropertyChanging();
				this._Id_Musica = value;
				this.SendPropertyChanged("Id_Musica");
				this.OnId_MusicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_De_Cliente", DbType="Bit")]
	public System.Nullable<bool> De_Cliente
	{
		get
		{
			return this._De_Cliente;
		}
		set
		{
			if ((this._De_Cliente != value))
			{
				this.OnDe_ClienteChanging(value);
				this.SendPropertyChanging();
				this._De_Cliente = value;
				this.SendPropertyChanged("De_Cliente");
				this.OnDe_ClienteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha_Insertada", DbType="DateTime")]
	public System.Nullable<System.DateTime> Fecha_Insertada
	{
		get
		{
			return this._Fecha_Insertada;
		}
		set
		{
			if ((this._Fecha_Insertada != value))
			{
				this.OnFecha_InsertadaChanging(value);
				this.SendPropertyChanging();
				this._Fecha_Insertada = value;
				this.SendPropertyChanged("Fecha_Insertada");
				this.OnFecha_InsertadaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activo", DbType="Bit")]
	public System.Nullable<bool> Activo
	{
		get
		{
			return this._Activo;
		}
		set
		{
			if ((this._Activo != value))
			{
				this.OnActivoChanging(value);
				this.SendPropertyChanging();
				this._Activo = value;
				this.SendPropertyChanged("Activo");
				this.OnActivoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Musica_PlayList_Musica", Storage="_Musica", ThisKey="Id_Musica", OtherKey="Id", IsForeignKey=true)]
	public Musica Musica
	{
		get
		{
			return this._Musica.Entity;
		}
		set
		{
			Musica previousValue = this._Musica.Entity;
			if (((previousValue != value) 
						|| (this._Musica.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Musica.Entity = null;
					previousValue.PlayList_Musicas.Remove(this);
				}
				this._Musica.Entity = value;
				if ((value != null))
				{
					value.PlayList_Musicas.Add(this);
					this._Id_Musica = value.Id;
				}
				else
				{
					this._Id_Musica = default(int);
				}
				this.SendPropertyChanged("Musica");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayList_PlayList_Musica", Storage="_PlayList", ThisKey="Id_PlayList", OtherKey="Id", IsForeignKey=true)]
	public PlayList PlayList
	{
		get
		{
			return this._PlayList.Entity;
		}
		set
		{
			PlayList previousValue = this._PlayList.Entity;
			if (((previousValue != value) 
						|| (this._PlayList.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PlayList.Entity = null;
					previousValue.PlayList_Musicas.Remove(this);
				}
				this._PlayList.Entity = value;
				if ((value != null))
				{
					value.PlayList_Musicas.Add(this);
					this._Id_PlayList = value.Id;
				}
				else
				{
					this._Id_PlayList = default(int);
				}
				this.SendPropertyChanged("PlayList");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Variable;
	
	private string _Valor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVariableChanging(string value);
    partial void OnVariableChanged();
    partial void OnValorChanging(string value);
    partial void OnValorChanged();
    #endregion
	
	public Setting()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Variable", DbType="VarChar(50)")]
	public string Variable
	{
		get
		{
			return this._Variable;
		}
		set
		{
			if ((this._Variable != value))
			{
				this.OnVariableChanging(value);
				this.SendPropertyChanging();
				this._Variable = value;
				this.SendPropertyChanged("Variable");
				this.OnVariableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor", DbType="VarChar(50)")]
	public string Valor
	{
		get
		{
			return this._Valor;
		}
		set
		{
			if ((this._Valor != value))
			{
				this.OnValorChanging(value);
				this.SendPropertyChanging();
				this._Valor = value;
				this.SendPropertyChanged("Valor");
				this.OnValorChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Nombre;
	
	private System.Nullable<int> _Id_Autor;
	
	private EntitySet<Musica> _Musicas;
	
	private EntityRef<Autor> _Autor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnId_AutorChanging(System.Nullable<int> value);
    partial void OnId_AutorChanged();
    #endregion
	
	public Album()
	{
		this._Musicas = new EntitySet<Musica>(new Action<Musica>(this.attach_Musicas), new Action<Musica>(this.detach_Musicas));
		this._Autor = default(EntityRef<Autor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(200)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Autor", DbType="Int")]
	public System.Nullable<int> Id_Autor
	{
		get
		{
			return this._Id_Autor;
		}
		set
		{
			if ((this._Id_Autor != value))
			{
				if (this._Autor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnId_AutorChanging(value);
				this.SendPropertyChanging();
				this._Id_Autor = value;
				this.SendPropertyChanged("Id_Autor");
				this.OnId_AutorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Musica", Storage="_Musicas", ThisKey="Id", OtherKey="Id_Album")]
	public EntitySet<Musica> Musicas
	{
		get
		{
			return this._Musicas;
		}
		set
		{
			this._Musicas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Autor_Album", Storage="_Autor", ThisKey="Id_Autor", OtherKey="Id", IsForeignKey=true)]
	public Autor Autor
	{
		get
		{
			return this._Autor.Entity;
		}
		set
		{
			Autor previousValue = this._Autor.Entity;
			if (((previousValue != value) 
						|| (this._Autor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Autor.Entity = null;
					previousValue.Albums.Remove(this);
				}
				this._Autor.Entity = value;
				if ((value != null))
				{
					value.Albums.Add(this);
					this._Id_Autor = value.Id;
				}
				else
				{
					this._Id_Autor = default(Nullable<int>);
				}
				this.SendPropertyChanged("Autor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Musicas(Musica entity)
	{
		this.SendPropertyChanging();
		entity.Album = this;
	}
	
	private void detach_Musicas(Musica entity)
	{
		this.SendPropertyChanging();
		entity.Album = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Autor")]
public partial class Autor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Nombre;
	
	private EntitySet<Album> _Albums;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
	
	public Autor()
	{
		this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(200)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Autor_Album", Storage="_Albums", ThisKey="Id", OtherKey="Id_Autor")]
	public EntitySet<Album> Albums
	{
		get
		{
			return this._Albums;
		}
		set
		{
			this._Albums.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Albums(Album entity)
	{
		this.SendPropertyChanging();
		entity.Autor = this;
	}
	
	private void detach_Albums(Album entity)
	{
		this.SendPropertyChanging();
		entity.Autor = null;
	}
}
#pragma warning restore 1591
